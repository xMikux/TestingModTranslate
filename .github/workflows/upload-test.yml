name: Test workflow with upload
on:
  push:
    paths: ['.github/workflows/upload-test.yml']
  pull_request:
    paths: ['.github/workflows/upload-test.yml']
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "Example artifact for $GITHUB_RUN_ID" >art-1.txt
          echo "Example artifact for $GITHUB_RUN_ID" >art-2.txt
      - uses: actions/upload-artifact@v2
        with:
          name: Artifact-1
          path: art-1.txt
      - uses: actions/upload-artifact@v2
        with:
          name: Artifact-2
          path: art-2.txt

  pr_comment:
    needs: [ build ]
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: 8BitJonny/gh-get-current-pr@2.1.3
        id: PR

      - name: test
        run: |
          echo ${{ github.run_id }}
          echo  ${{ github.event.number }}
          cat << EOF > b.json
          ${{ toJSON(github.event.pull_request) }}
          EOF
          cat b.json

  PR-Comment:
    name: PR Comment
    runs-on: ubuntu-latest
    needs: [ build ]
    if: |
      github.event_name == 'pull_request'

    steps:
      - name: Get Current Artifacts
        id: Artifacts
        run: |
          Artifact_0_Name=$(curl -H "Accept: application/vnd.github+json" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts | jq -r '.artifacts[0] | .name')
          Artifact_0_ID=$(curl -H "Accept: application/vnd.github+json" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts | jq -r '.artifacts[0] | .id')
          Artifact_1_Name=$(curl -H "Accept: application/vnd.github+json" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts | jq -r '.artifacts[1] | .name')
          Artifact_1_ID=$(curl -H "Accept: application/vnd.github+json" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts | jq -r '.artifacts[1] | .id')
          echo "Artifact_0_Name=$Artifact_0_Name" >> $GITHUB_OUTPUT
          echo "$Artifact_0_Name"
          echo "Artifact_0_ID=$Artifact_0_ID" >> $GITHUB_OUTPUT
          echo "$Artifact_0_ID"
          echo "Artifact_1_Name=$Artifact_1_Name" >> $GITHUB_OUTPUT
          echo "$Artifact_1_Name"
          echo "Artifact_1_ID=$Artifact_1_ID" >> $GITHUB_OUTPUT
          echo "$Artifact_1_ID"

      - name: Create or update comment
        uses: thollander/actions-comment-pull-request@v1
        with:
          comment_includes: '感謝貢獻！❤️'
          message: |
            感謝貢獻！❤️
            
            下載合併請求測試用翻譯包：
            - [${{ steps.Artifacts.outputs.Artifact_1_Name }}](https://nightly.link/${{ github.repository }}/actions/artifacts/${{ steps.Artifacts.outputs.Artifact_1_ID }}.zip)
            - [${{ steps.Artifacts.outputs.Artifact_2_Name }}](https://nightly.link/${{ github.repository }}/actions/artifacts/${{ steps.Artifacts.outputs.Artifact_2_ID }}.zip)

      # - uses: actions/github-script@v5
      #   with:
      #     # This snippet is public-domain, taken from
      #     # https://github.com/oprypin/nightly.link/blob/master/.github/workflows/pr-comment.yml
      #     script: |
      #       async function upsertComment(owner, repo, issue_number, purpose, body) {
      #         const {data: comments} = await github.rest.issues.listComments(
      #           {owner, repo, issue_number});
      #         const marker = `<!-- bot: ${purpose} -->`;
      #         body = marker + "\n" + body;
      #         const existing = comments.filter((c) => c.body.includes(marker));
      #         if (existing.length > 0) {
      #           const last = existing[existing.length - 1];
      #           core.info(`Updating comment ${last.id}`);
      #           await github.rest.issues.updateComment({
      #             owner, repo,
      #             body,
      #             comment_id: last.id,
      #           });
      #         } else {
      #           core.info(`Creating a comment in issue / PR #${issue_number}`);
      #           await github.rest.issues.createComment({issue_number, body, owner, repo});
      #         }
      #       }
      #       const {owner, repo} = context.repo;
      #       const run_id = ${{ github.run_id }};
      #       const pull_requests = ${{ toJSON(github.event.pull_request) }};
      #       if (!pull_requests.length) {
      #         return core.error("This workflow doesn't match any pull requests!");
      #       }
      #       const artifacts = await github.paginate(
      #         github.rest.actions.listWorkflowRunArtifacts, {owner, repo, run_id});
      #       if (!artifacts.length) {
      #         return core.error(`No artifacts found`);
      #       }
      #       let body = `Download the artifacts for this pull request:\n`;
      #       for (const art of artifacts) {
      #         body += `\n* [${art.name}.zip](https://nightly.link/${owner}/${repo}/actions/artifacts/${art.id}.zip)`;
      #       }
      #       core.info("Review thread message body:", body);
      #       for (const pr of pull_requests) {
      #         await upsertComment(owner, repo, pr.number,
      #           "nightly-link", body);
      #       }




